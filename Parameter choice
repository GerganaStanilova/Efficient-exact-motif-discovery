#include <iostream>
#include <math.h>
#include <cmath>
using namespace std;

float log4_function(float x){
	return log(x)/log(4);
}

int choose_k(int t, int n, int l, float E)
{
	return ceil(log4_function((t*(n-l+1))/E)); //use the ceiling function because k should be >=
}

int binomial_coefficient(int n, int k) //https://www.geeksforgeeks.org/space-and-time-efficient-binomial-coefficient/
{
    int res = 1;

    // Since C(n, k) = C(n, n-k)
    if ( k > n - k )
        k = n - k;

    // Calculate value of [n * (n-1) *---* (n-k+1)] / [k * (k-1) *----* 1]
    for (int i = 0; i < k; ++i)
    {
        res *= (n - i);
        res /= (i + 1);
    }
    return res;
}

float p_hat_function(int l, int d, int k){ //each motif occurrence hashes to the planted bucket with prob p_hat
	float x = (float) binomial_coefficient((l-d),k);
	float y = (float) binomial_coefficient(l,k);
	return x / y;
}

int choose_m(int t_hat, float p_hat, int s){
	float q = 0.95;
	float bernouilli = (float) binomial_coefficient(t_hat,s);
	return ceil((log(1-q)) / (log(bernouilli * (pow(p_hat, s)*(pow(1-p_hat, t_hat-s))))));
	//value in the second log: the probability that fewer than s planted occurrences hash to the planted bucket in a given trial (Bernouilli)
}


int main(){
  int t = 20;
  int n = 600;
  int l = 15;
  int d = 4;
  float E = 0.9;
  int s = 3;

  int k = choose_k(t, n, l, E); //7
  cout << "Choose k to be = " << k << endl;
  float p_hat = p_hat_function(l, d, k); //0.0512821
  cout << "p hat is then = " << p_hat << endl;
  cout << "Choose m to be = " << choose_m(t, p_hat, s) << endl; //2
  
  return 0;
}
